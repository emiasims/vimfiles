let g:ts#shortnames = {}

" lua {{{1
" comment true function else field comment method number string table
let g:ts#shortnames.lua = #{
      \ arguments: 'args',
      \ local_variable_declaration: 'assignment',
      \ variable_declaration: 'assignment',
      \ binary_operation: 'binop',
      \ condition_expression: 'conditional',
      \ function_call: 'call',
      \ function_name: 'name',
      \ identifier: 'identifier',
      \ if_statement: 'if',
      \ parameters: 'params',
      \ property_identifier: 'property',
      \ return_statement: 'return',
      \ unary_operation: 'unaryop',
      \ variable_declarator: 'variable',
      \ while_statement: 'while',
      \ field_expression: '',
      \ }

" python {{{1
" assignment call comment float identifier list true
let g:ts#shortnames.python = #{
      \ argument_list: 'arg',
      \ attribute: 'attr',
      \ augmented_assignment: 'assignment',
      \ binary_operator: 'binop',
      \ block: '',
      \ block_quote: 'block_quote',
      \ boolean_operator: 'boolop',
      \ break_statement: 'break_statement',
      \ call: 'call',
      \ class_definition: 'class',
      \ classifier: 'classifier',
      \ comment: 'comment',
      \ comparison_operator: 'conditional',
      \ conditional_expression: 'conditional',
      \ continue_statement: 'continue',
      \ decorated_definition: '',
      \ decorator: 'decorator',
      \ default_parameter: 'default',
      \ definition: '',
      \ definition_list: '',
      \ delete_statement: 'del',
      \ dictionary: 'dict',
      \ dictionary_comprehension: 'comprehension',
      \ dictionary_splat: 'splat',
      \ dictionary_splat_pattern: 'splat',
      \ escape_sequence: '',
      \ except_clause: 'except',
      \ expression_statement: 'expr',
      \ false: 'false',
      \ float: 'float',
      \ for_in_clause: 'for',
      \ for_statement: 'for',
      \ function_definition: 'def',
      \ identifier: 'identifier',
      \ if_clause: 'if',
      \ if_statement: 'if',
      \ import_from_statement: 'from',
      \ import_statement: 'import',
      \ integer: 'int',
      \ interpolation: 'fstr',
      \ keyword_argument: 'kwarg',
      \ lambda: 'Î»',
      \ list: 'list',
      \ list_comprehension: 'comprehension',
      \ list_item: '',
      \ list_splat: 'splat',
      \ list_splat_pattern: 'splat',
      \ none: 'none',
      \ pair: 'pair',
      \ paragraph: 'paragraph',
      \ parenthesized_expression: '',
      \ pass_statement: 'pass',
      \ raise_statement: 'raise',
      \ return_statement: 'return',
      \ section: 'docstr',
      \ string: 'str',
      \ subscript: 'attr',
      \ term: 'term',
      \ title: '',
      \ true: 'true',
      \ try_statement: 'try',
      \ tuple: 'tuple',
      \ tuple_pattern: 'tuple',
      \ unary_operator: 'unaryop',
      \ while_statement: 'while',
      \ with_clause: 'with',
      \ with_item: 'item',
      \ with_statement: '',
      \ }
