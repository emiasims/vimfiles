# priority -2

snippet gvar "Global / configuration variable" b
if !exists("g:${1:MyUltraImportantVar}")
	let g:$1 = ${2:"${3:<tab>}"}
endif
endsnippet

snippet guard "script reload guard" b
if exists('${1:did_`!p snip.rv = snip.fn.replace('.','_')`}') || &cp${2: || version < 700}
	finish
endif
let $1 = 1$3
endsnippet

# note: '  return' because snip.rv does not use expandtab.
# :-4 is to remove .vim
snippet fun "function definition" b
function! `!p snip.rv = ('#'.join(path.split('/')[1:])[:-4] + '#') if path.startswith('autoload') and not re.match('.:', t[1]) else ''`${1}($2) abort " {{{`!p snip.rv = 2 if t[1].startswith('s:') else 1`
	${0:${VISUAL}}`!p snip.rv = '\n  return ' if t[3] else ''`${3:val}
endfunction
endsnippet

# Note: only }} because autopairs inserts the third
snippet { "fold makers" b
" $1 {{{
${0:${VISUAL}}
" }}
endsnippet

snippet if "if block" b
if ${1:condition}
	${0:${VISUAL:break}}
endif
endsnippet

snippet for "for loop" b
for ${1:var} in ${2:iterable}
	${0:${VISUAL:continue}}
endfor
endsnippet

snippet while "while loop" b
while ${1:condition}
	${0:${VISUAL:continue}}
endwhile
endsnippet

snippet dowhile "do while loop" b
while 1
	${0:${VISUAL:continue}}
	if ${1:condition}
		break
	endif
endwhile
endsnippet

snippet larg "for loop" bA
let ${1:arg} = get(a:, ${2:1}, ${0:default})
endsnippet

snippet ife "if else" b
if ${1:condition}
	${2:${VISUAL:continue}}
else
	${3:${VISUAL:break}}
endif
endsnippet

snippet ifei "if elseif" b
if ${1:condition}
	${2:${VISUAL}}
elseif ${3:condition}
	${4:${VISUAL}}
endif
endsnippet

snippet mess "message clear" b
messages clear
echom ${0:${VISUAL}}
endsnippet

snippet curs "Restore cursor position after performing something" b
let cursor = getcurpos()[1:]
${0:${VISUAL}}
call cursor(cursor)
endsnippet

snippet aug "autogroup" b
augroup ${1:name}
	autocmd!
	autocmd ${0:${VISUAL}}
augroup END
endsnippet
