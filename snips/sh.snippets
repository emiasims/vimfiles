priority -2

snippet #! "shebang" b
#!/bin/bash

$0
endsnippet

snippet #!env "#!/usr/bin/env (!env)" b
#!/usr/bin/env bash

$0
endsnippet

snippet safe "safe bash options" b
#!/usr/bin/env bash
set -o errexit -o pipefail -o noclobber -o nounset
IFS=$'\n\t'

$0
endsnippet

snippet temp "Tempfile" b
${1:tmpfile}="$(mktemp -t ${3:--suffix=${4:.SUFFIX}} ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`}.XXXXXX)"
${5:${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'}${6/(.+)/" 0               # EXIT/}
${7/(.+)/trap "/}${7:rm -f '$${1/.*\s//}'; exit 1}${7/(.+)/" 2       # INT/}
${8/(.+)/trap "/}${8:rm -f '$${1/.*\s//}'; exit 1}${8/(.+)/" 1 15    # HUP TERM/}}

$0
endsnippet

snippet case "case .. esac (case)" b
case ${1:word} in
	${2:pattern} )
		${0:${VISUAL:#}}
		;;
esac
endsnippet

snippet for "for ... done (for)" b
for (( i = 0; i < ${1:10}; i++ )); do
	${0:${VISUAL:#}}
done
endsnippet

snippet forin "for ... in ... done (forin)" b
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:${VISUAL:#}}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet

snippet if "if ... then (if)" b
if ${2:[[ ${1:condition} ]]}; then
	${0:${VISUAL:#}}
fi
endsnippet

snippet elif "elif .. (elif)" b
elif ${2:[[ ${1:condition} ]]}; then
	${0:${VISUAL:#}}
endsnippet

snippet until "until ... (done)" b
until ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL:#}}
done
endsnippet

snippet while "while ... (done)" b
while ${2:[[ ${1:condition} ]]}; do
	${0:${VISUAL:#}}
done
endsnippet

snippet scriptdir "set script dir variable" b
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
endsnippet

snippet getopt
# TODO
endsnippet

snippet fun
function ${1:function_name}() {
	${0:${VISUAL:#}}
}
endsnippet

snippet fun-sh
${1:function_name}() {
	${0:${VISUAL:#}}
}
endsnippet

# vim:ft=snippets:
