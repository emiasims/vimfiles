#priority -2

######################
## Common Constructs #
######################
#snippet #! "Shebang header for python scripts" b
##!/usr/bin/env python
## -*- coding: utf-8 -*-
#$0
#endsnippet

#snippet imp "import" b
#import ${0:module}
#endsnippet

#snippet from "import from" b
#from ${1:package} import ${0:module}
#endsnippet

snippet if "if block" b
if $1:
	${2:pass}
endsnippet

snippet ife "if else block" b
if $1:
	${2:pass}
else:
	${3:pass}
endsnippet

snippet ifel "if elif else block" b
if ${1:cond}:
	${3:pass}
elif ${2:cond}:
	${4:pass}
else:
	${5:pass}
endsnippet

snippet el "else block" b
else:
	${3:pass}
endsnippet

snippet ei "elif bloc" b
elif ${1:cond}:
	${2:pass}
endsnippet

snippet ifmain "if name is main cli block" b
if __name__ == "__main__":
	${1:${VISUAL:main()}}
endsnippet

snippet init "init dunder method" b
def __init__(self, $1):
	${2:pass}
endsnippet

snippet call "call dunder method" b
def __call__(self, $1):
	${2:pass}
endsnippet

###########
# Looping #
###########

snippet lcp "list comprehension" A
[${1} for ${2} in ${3:${VISUAL}}]${0}
endsnippet

snippet dcp "dict comprehension" A
{${1}: ${2} for ${3} in ${4:${VISUAL}}}${0}
endsnippet

snippet scp "set comprehension" A
{${1} for ${2} in ${3:${VISUAL}}}${0}
endsnippet

snippet for "for loop" b
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}
endsnippet

snippet fel "for else loop" b
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}
else:
	${4:pass}
endsnippet

snippet whi "while loop" b
while ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet wel "while else loop" b
while ${1:condition}:
	${0:${VISUAL}}
else:
	${2:pass}
endsnippet

snippet dowi "do while loop" b
while True:
	${0:${VISUAL}}

	if ${1:condition}:
		break
endsnippet

snippet try "try except block" b
try:
	${0:${VISUAL:pass}}
except ${1}Error:
	${2:__import__('ipdb').set_trace()}
endsnippet

snippet tryf "try finally block" b
try:
	${0:${VISUAL:pass}}
finally:
	${1:pass}
endsnippet



##########
# COMMON #
##########

#class Arg(object):
#	def __init__(self, arg):
#		self.arg = arg
#		self.name = arg.split('=')[0].strip()

#	def __str__(self):
#		return self.name

#	def __unicode__(self):
#		return self.name

#	def is_kwarg(self):
#		return '=' in self.arg


#def get_args(arglist):
#	args = [Arg(arg) for arg in arglist.split(',') if arg]
#	args = [arg for arg in args if arg.name != 'self']

#	return args

#############
# Functions #
#############

snippet def "function body" b
def ${1:funcname}($2):
	${3:${VISUAL:pass}}
endsnippet

########################################
# Class & Special Method Name Snippets #
########################################

snippet contain "methods for emulating a container type" b
def __len__(self):
	${1:pass}

def __getitem__(self, key):
	${2:pass}

def __setitem__(self, key, value):
	${3:pass}

def __delitem__(self, key):
	${4:pass}

def __iter__(self):
	${5:pass}

def __reversed__(self):
	${6:pass}

def __contains__(self, item):
	${7:pass}
endsnippet

snippet context "context manager methods" b
def __enter__(self):
	${1:pass}

def __exit__(self, exc_type, exc_value, traceback):
	${2:pass}
endsnippet

snippet attr "methods for customizing attribute access" b
def __getattr__(self, name):
	${1:pass}

def __setattr__(self, name, value):
	${2:pass}

def __delattr__(self, name):
	${3:pass}
endsnippet

#snippet cmp "methods implementing rich comparison" bm
#def __eq__(self, other):
#	${1:pass}

#def __ne__(self, other):
#	${2:pass}

#def __lt__(self, other):
#	${3:pass}

#def __le__(self, other):
#	${4:pass}

#def __gt__(self, other):
#	${5:pass}

#def __ge__(self, other):
#	${6:pass}

#def __cmp__(self, other):
#	${7:pass}
#endsnippet

#snippet repr "methods implementing string representation" bm
#def __repr__(self):
#	${1:pass}

#def __str__(self):
#	return unicode(self).encode('utf-8')

#def __unicode__(self):
#	${3:pass}
#endsnippet
